// Generated by Dagger (https://dagger.dev).
package ru.project.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.project.factories.PostLoader;
import ru.project.net.RedditClient;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidePostLoaderFactory implements Factory<PostLoader> {
  private final NetworkModule module;

  private final Provider<RedditClient> redditClientProvider;

  public NetworkModule_ProvidePostLoaderFactory(NetworkModule module,
      Provider<RedditClient> redditClientProvider) {
    this.module = module;
    this.redditClientProvider = redditClientProvider;
  }

  @Override
  public PostLoader get() {
    return providePostLoader(module, redditClientProvider.get());
  }

  public static NetworkModule_ProvidePostLoaderFactory create(NetworkModule module,
      Provider<RedditClient> redditClientProvider) {
    return new NetworkModule_ProvidePostLoaderFactory(module, redditClientProvider);
  }

  public static PostLoader providePostLoader(NetworkModule instance, RedditClient redditClient) {
    return Preconditions.checkNotNullFromProvides(instance.providePostLoader(redditClient));
  }
}
