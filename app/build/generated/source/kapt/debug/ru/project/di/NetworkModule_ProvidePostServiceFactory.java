// Generated by Dagger (https://dagger.dev).
package ru.project.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.project.data.models.PostService;
import ru.project.factories.PostLoader;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidePostServiceFactory implements Factory<PostService> {
  private final NetworkModule module;

  private final Provider<PostLoader> postLoaderProvider;

  public NetworkModule_ProvidePostServiceFactory(NetworkModule module,
      Provider<PostLoader> postLoaderProvider) {
    this.module = module;
    this.postLoaderProvider = postLoaderProvider;
  }

  @Override
  public PostService get() {
    return providePostService(module, postLoaderProvider.get());
  }

  public static NetworkModule_ProvidePostServiceFactory create(NetworkModule module,
      Provider<PostLoader> postLoaderProvider) {
    return new NetworkModule_ProvidePostServiceFactory(module, postLoaderProvider);
  }

  public static PostService providePostService(NetworkModule instance, PostLoader postLoader) {
    return Preconditions.checkNotNullFromProvides(instance.providePostService(postLoader));
  }
}
